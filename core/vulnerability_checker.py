import requests
from typing import List, Dict, Optional

class Vulnerability:
    def __init__(self, package_name: str, version: str, cve_id: str, severity: Optional[str] = None, summary: Optional[str] = None, remediation: Optional[str] = None, exploitability: Optional[str] = None, affected_version_range: Optional[str] = None):
        self.package_name = package_name
        self.version = version
        self.cve_id = cve_id
        self.severity = severity
        self.summary = summary
        self.remediation = remediation
        self.exploitability = exploitability
        self.affected_version_range = affected_version_range

class VulnerabilityChecker:
    OSV_API = "https://api.osv.dev/v1/query"

    def __init__(self):
        pass

    def check_vulnerabilities(self, dependencies: List[Dict]) -> List[Vulnerability]:
        vulns = []
        for dep in dependencies:
            name = dep.get('name')
            version = dep.get('version')
            osv_vulns = self._query_osv(name, version)
            for osv in osv_vulns:
                cve_id = osv.get('id', 'UNKNOWN')
                severity = self._extract_severity(osv)
                summary = osv.get('summary', '')
                remediation = self._extract_remediation(osv)
                exploitability = osv.get('exploitability', None)
                affected_version_range = osv.get('affected_version_range', None)
                vulns.append(Vulnerability(name, version, cve_id, severity, summary, remediation, exploitability, affected_version_range))
        return vulns

    def _query_osv(self, name: str, version: str) -> List[Dict]:
        # OSV.dev expects ecosystem and package name; for Java, use 'Maven' ecosystem
        payload = {
            "package": {
                "ecosystem": "Maven",
                "name": name
            },
            "version": version
        }
        try:
            resp = requests.post(self.OSV_API, json=payload, timeout=10)
            if resp.status_code == 200:
                vulns = resp.json().get('vulns', [])
                return vulns
        except Exception:
            pass
        return []

    def _extract_severity(self, osv: Dict) -> str:
        severity = "UNKNOWN"
        for s in osv.get('severity', []):
            if s.get('type') == 'CVSS_V3':
                severity = s.get('score', 'UNKNOWN')
        return severity

    # _extract_cvss removed

    def _extract_remediation(self, osv: Dict) -> Optional[str]:
        for a in osv.get('affected', []):
            if 'ranges' in a:
                for r in a['ranges']:
                    if r.get('type') == 'ECOSYSTEM' and 'events' in r:
                        for e in r['events']:
                            if 'fixed' in e:
                                return f"Upgrade to {e['fixed']}"
        return None
